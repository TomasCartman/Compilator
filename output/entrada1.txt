[1] keyword var >
[1] keyword string >
[1] identifier name >
[1] relationalOperator = >
[1] string "name" >
[12] relationalOperator != >
[13] relationalOperator > >
[13] relationalOperator > >
[14] logicalOperator || >
[15] logicalOperator && >
[16] logicalOperator ! >
[17] logicalOperator || >
[18] logicalOperator && >
[19] logicalOperator ! >
[19] logicalOperator ! >
[22] logicalOperator ! >
[22] logicalOperator ! >
[22] logicalOperator ! >
[30] keyword var >
[30] keyword real >
[30] identifier xc >
[30] relationalOperator = >
[30] number 1.111 >
[31] keyword var >
[31] keyword real >
[31] identifier hs >
[31] relationalOperator = >
[31] number 2.03823 >
[32] keyword var >
[32] keyword real >
[32] identifier ty >
[32] relationalOperator = >
[32] number 0 >
[32] delimiter . >
[33] keyword var >
[33] keyword real >
[33] identifier tu >
[33] relationalOperator = >
[33] number 0 >
[33] delimiter . >
[33] number 1 >
[34] keyword var >
[34] keyword real >
[34] identifier nvv >
[34] relationalOperator = >
[34] number 2 >
[34] delimiter . >
[34] number 1 >
[36] keyword var >
[36] keyword int >
[36] identifier i >
[36] relationalOperator = >
[36] number 0 >
[36] delimiter ; >
[37] keyword var >
[37] keyword int >
[37] identifier c >
[37] relationalOperator = >
[37] number 1 >
[37] delimiter ; >
[38] keyword var >
[38] keyword int >
[38] identifier a >
[38] relationalOperator = >
[38] identifier c >
[38] arithmeticOperator + >
[38] number 1 >
[38] delimiter ; >
[39] keyword var >
[39] keyword boolean >
[39] identifier isValid >
[39] relationalOperator = >
[39] keyword true >
[40] keyword var >
[40] keyword string >
[40] identifier name >
[40] relationalOperator = >
[40] string "name" >
[42] identifier i >
[42] arithmeticOperator / >
[42] identifier c >
[44] identifier a >
[44] arithmeticOperator * >
[44] identifier c >
[45] identifier a >
[45] arithmeticOperator * >
[45] identifier i >
[46] identifier a >
[46] relationalOperator = >
[46] identifier c >
[46] arithmeticOperator / >
[46] identifier a >
[47] keyword if >
[47] delimiter ( >
[47] identifier c >
[47] relationalOperator > >
[47] identifier a >
[47] delimiter ) >
[47] delimiter { >
[48] keyword print >
[48] delimiter ( >
[48] string "c>a" >
[48] delimiter ) >
[49] delimiter } >
[49] keyword else >
[49] delimiter { >
[50] identifier isValid >
[50] relationalOperator = >
[50] keyword false >
[51] delimiter } >
[52] identifier c >
[52] relationalOperator <= >
[52] identifier a >
[52] delimiter ; >
[53] identifier a >
[53] relationalOperator == >
[53] identifier i >
[53] delimiter ; >
[55] keyword if >
[55] delimiter ( >
[55] identifier a >
[55] relationalOperator > >
[55] identifier b >
[55] logicalOperator && >
[55] identifier c >
[55] relationalOperator == >
[55] identifier a >
[55] logicalOperator || >
[55] identifier i >
[55] relationalOperator < >
[55] identifier a >
[55] delimiter ) >
[55] delimiter { >
[57] delimiter } >
[57] keyword else >
[57] keyword if >
[57] delimiter ( >
[57] identifier a >
[57] relationalOperator < >
[57] identifier b >
[57] logicalOperator && >
[57] identifier c >
[57] relationalOperator == >
[57] identifier a >
[57] logicalOperator || >
[57] identifier i >
[57] relationalOperator == >
[57] identifier i >
[57] delimiter ) >
[57] delimiter { >
[59] delimiter } >
[61] keyword var >
[61] keyword int >
[61] identifier b >
[61] relationalOperator = >
[61] number 1 >
[63] identifier b >
[63] arithmeticOperator ++ >
[64] identifier b >
[64] arithmeticOperator -- >
[65] identifier b >
[65] arithmeticOperator / >
[65] identifier b >
[66] identifier b >
[66] arithmeticOperator * >
[66] number 2 >
[68] identifier b >
[68] relationalOperator = >
[68] number 0 >
[68] delimiter ; >
[69] identifier h >
[69] relationalOperator = >
[69] identifier b >
[69] arithmeticOperator + >
[69] number 3 >
[69] delimiter ; >
[70] identifier c >
[70] relationalOperator != >
[70] identifier i >
[70] delimiter ; >
[71] identifier a >
[71] relationalOperator > >
[71] relationalOperator = >
[71] identifier i >
[71] delimiter ; >
[72] keyword while >
[72] delimiter ( >
[72] identifier a >
[72] relationalOperator >= >
[72] identifier b >
[72] logicalOperator && >
[72] identifier h >
[72] relationalOperator < >
[72] identifier c >
[72] logicalOperator || >
[72] identifier c >
[72] relationalOperator == >
[72] identifier a >
[72] logicalOperator || >
[72] identifier i >
[72] relationalOperator != >
[72] identifier c >
[72] delimiter ) >
[72] delimiter { >
[73] identifier z >
[73] relationalOperator = >
[73] identifier b >
[73] delimiter ; >
[73] identifier b >
[73] relationalOperator > >
[73] relationalOperator > >
[73] identifier a >
[73] delimiter ; >
[73] identifier h >
[73] relationalOperator <= >
[73] identifier a >
[73] delimiter ; >
[74] delimiter } >
